package dialectquery

import (
	"fmt"
)

type SpannerPG struct{}

var _ Querier = (*SpannerPG)(nil)

func (p *SpannerPG) CreateTable(tableName string) string {
	q := `CREATE TABLE %s (
		id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (BIT_REVERSED_POSITIVE),
		version_id bigint NOT NULL,
		is_applied boolean NOT NULL,
		tstamp timestamptz NOT NULL DEFAULT now()
	)`
	return fmt.Sprintf(q, tableName)
}

func (p *SpannerPG) InsertVersion(tableName string) string {
	q := `INSERT INTO %s (version_id, is_applied) VALUES ($1, $2)`
	return fmt.Sprintf(q, tableName)
}

func (p *SpannerPG) DeleteVersion(tableName string) string {
	q := `DELETE FROM %s WHERE version_id=$1`
	return fmt.Sprintf(q, tableName)
}

func (p *SpannerPG) GetMigrationByVersion(tableName string) string {
	q := `SELECT tstamp, is_applied FROM %s WHERE version_id=$1 ORDER BY tstamp DESC LIMIT 1`
	return fmt.Sprintf(q, tableName)
}

func (p *SpannerPG) ListMigrations(tableName string) string {
	q := `SELECT version_id, is_applied from %s ORDER BY id DESC`
	return fmt.Sprintf(q, tableName)
}

func (p *SpannerPG) GetLatestVersion(tableName string) string {
	q := `SELECT max(version_id) FROM %s`
	return fmt.Sprintf(q, tableName)
}
